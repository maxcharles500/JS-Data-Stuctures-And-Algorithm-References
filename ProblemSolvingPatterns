//Algorithm: A process or set of of steps to solve a certain problem or complete a task

//How to Improve solving problems and writing algorithms:
    //1. Devise a plan for solving problems 
    //2. Master common problem solving patterns

//Many of these are unnoficial names!!!

//Frequency Counter
    //This pattern uses objects or sets to collect values and frequencies of values
    //This can avoid the need for nested loops O(N^2) operations with arrays or strings

    //EXAMPLE
        //Write a function called same, which accepts two arrays. The function should return true if every value in the first array has its corrresponding value squared in the second array. The order doesn't matter but the frequency of values must be the same. 

        //Naive solution
            /*function same(arr1, arr2){
                if(arr1.length !== arr2.length){
                    return false;
                }
                for(let i = 0; i < arr1.length; i++){
                    let correctIndex = arr2.indexOf(arr1[i] ** 2)
                    if(correctIndex === -1) {
                        return false;
                    }
                    arr2.splice(correctIndex,1)
                }
                return true;
            }
            
            same([1,2,3,2], [9,1,4,4])*/
                //Time Compexity O(N^2)

                //Refactored Solution
            /*function same(arr1, arr2){
                if(arr1.length !== arr2.length){
                    return false;
                }
                let frequencyCounter1 = {}
                let frequencyCounter2 = {}
                for(let val of arr1){
                    frequencyCounter1[val] = (frequencyCounter1[val] || 0) + 1
                }
                for(let val of arr2){
                    frequencyCounter2[val] = (frequencyCounter2[val] || 0) + 1        
                }
                console.log(frequencyCounter1);
                console.log(frequencyCounter2);
                for(let key in frequencyCounter1){
                    if(!(key ** 2 in frequencyCounter2)){
                        return false
                    }
                    if(frequencyCounter2[key ** 2] !== frequencyCounter1[key]){
                        return false
                    }
                }
                return true
            }

            same([1,2,3,2,5], [9,1,4,4,11])*/
                //Time Compexity O(N)

    //Multiple Pointers
            //creating pointers or values that correspond to an index or position and move towards the beginning, middle, or end based on a certain condition
            //Very efficient for solving problems with minimal space complexity 

            //EXAMPLE
                //Write a function called sumZero which accepts a sorted array of integers. The function should find the first pair where the sum is 0. Return an array that includes both values that sum to zero or return undefined if no pair is found.

                //Naive Solution
                    /* 
                    function sumZero(arr){
                        for(let i = 0; i < arr.length; i++){
                            for(let j = i+1; j < arr.length; j++){
                                if(arr[i] + arr[j] === 0){
                                    return [arr[i], arr[j]];
                                }
                            }
                        }
                    }


                    sumZero([-4,-3,-2,-1,0,1,2,5])
                    */
                   //Time Compexity O(N^2)

                   //Refactored Solution
                    /* 
                    function sumZero(arr){
                        let left = 0;
                        let right = arr.length - 1;
                        while(left < right){
                            let sum = arr[left] + arr[right];
                            if(sum === 0){
                                return [arr[left], arr[right]]
                            }else if(sum > 0){
                                right--;
                            }else{
                                left++;
                            }
                        }


                    sumZero([-4,-3,-2,-1,0,1,2,5])
                    */
                   //Time Complexity O(N)
                   //Space Complexity O(1)

    //Sliding Window
        //This pattern involves creating a window which can either be an array or number from one position to another.
        //Depending on a certain condition the window either increases, or closes(and another one is created)
        //Useful for keeping track of a subset of data in an array/string etc...

        //EXAMPLE
            //write a function called maxSubArray which accepts an array of integers and a number called n. The function should calculate the maximum sum of n consecutive elements in the array.
            
             //Naive Solution
                    /* 
                    function maxSubarraySum(arr, num) {
                        if ( num > arr.length){
                            return null;
                        }
                        var max = -Infinity;
                        for (let i = 0; i < arr.length - num + 1; i ++){
                            temp = 0;
                            for (let j = 0; j < num; j++){
                            temp += arr[i + j];
                            }
                            if (temp > max) {
                            max = temp;
                            }
                        }
                        return max;
                        }

                        maxSubarraySum([2,6,9,2,1,8,5,6,3],3)
                    */
                   //Time Compexity O(N^2)

            //Refactored Solution
                /* 
                   function maxSubarraySum(arr, num){
                        let maxSum = 0;
                        let tempSum = 0;
                        if (arr.length < num) return null;
                        for (let i = 0; i < num; i++) {
                            maxSum += arr[i];
                        }
                        tempSum = maxSum;
                        for (let i = num; i < arr.length; i++) {
                            tempSum = tempSum - arr[i - num] + arr[i];
                            maxSum = Math.max(maxSum, tempSum);
                        }
                        return maxSum;
                        }

                        maxSubarraySum([2,6,9,2,1,8,5,6,3],3)
                    */
                    //Time Complexity O(N)

    //Divide and Conquer
        //this pattern involves dividing a data set into smaller chunks and then repeating a process with a subset of data.
        //THis pattern can DRAMATICALLY decrease time complexity

        //EXAMPLE 
            //Given a sorted array of integers, write a function called search, that accepts a value and returns the index where the value passed to the function is located. If the value is not found, return -1
