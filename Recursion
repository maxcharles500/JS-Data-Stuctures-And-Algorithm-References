//Recursion: A process(function) that calls itself

//How do recursive functions work?
//Invoke the same function with a different input until you reach your base case

//Base Case
//The condition where the recursion ends(this is the most important concept of recursion)
//almost always involves a conditional

//Two essential parts of any recursive function
//Base Case
//your changing input and how youre changing it

//Recursive countdown
const countDown = (num) => {
    if(num <= 0) {
        console.log('all done');
        return;
    }
    console.log(num);
    num--;
    countDown(num);
}
// console.log(countDown(15))

//Recursive sumRange
const sumRange = (num) => {
    //Base Case
    if(num === 1) return 1;
    //change input for next func call
    return num + sumRange(num-1);
}
// console.log(sumRange(10))

//Factorial iteratively 
// const iterativeFactorial = (num) => {
//     let total = 1
//     for(let i = num; i > 1; i--){
//         total *= i
//     }
//     return total;
// }

//Factorial Recursively
const factorial = (num) => {
    if(num === 1) return 1;
    return num * factorial(num-1);
}
// console.log(factorial(5))

//Common Recursion Mistakes
//No Base Case
//Forgetting to return or returning the wrong thing
//Stack Overflow! exceeding the maximum stack size

//Helper Method recursion
// function collectOddValues(arr){
    
//     let result = [];

//     function helper(helperInput){
//         if(helperInput.length === 0) {
//             return;
//         }
//         if(helperInput[0] % 2 !== 0){
//             result.push(helperInput[0])
//         }
//         helper(helperInput.slice(1))
//     }
//     helper(arr)
//     return result;
// }
// collectOddValues([1,2,3,4,5,6,7,8,9])

//Pure Recursion
// function collectOddValues(arr){
//     let newArr = [];
//     if(arr.length === 0) {
//         return newArr;
//     }
//     if(arr[0] % 2 !== 0){
//         newArr.push(arr[0]);
//     }
//     newArr = newArr.concat(collectOddValues(arr.slice(1)));
//     return newArr;
// }
// collectOddValues([1,2,3,4,5])